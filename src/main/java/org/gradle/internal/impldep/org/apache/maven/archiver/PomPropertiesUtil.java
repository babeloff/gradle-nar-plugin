//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//

package org.gradle.internal.impldep.org.apache.maven.archiver;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;
import org.gradle.internal.impldep.org.codehaus.plexus.archiver.ArchiverException;
import org.gradle.internal.impldep.org.codehaus.plexus.util.IOUtil;
import org.gradle.internal.impldep.org.apache.maven.project.MavenProject;
import org.gradle.internal.impldep.org.codehaus.plexus.archiver.jar.JarArchiver;

public class PomPropertiesUtil {
    private static final String GENERATED_BY_MAVEN = "Generated by Maven";

    public PomPropertiesUtil() {
    }

    private boolean sameContents(Properties props, File file) throws IOException {
        if (!file.isFile()) {
            return false;
        } else {
            Properties fileProps = new Properties();
            FileInputStream istream = null;

            boolean var6;
            try {
                istream = new FileInputStream(file);
                fileProps.load(istream);
                istream.close();
                istream = null;
                boolean var5 = fileProps.equals(props);
                return var5;
            } catch (IOException var10) {
                var6 = false;
            } finally {
                IOUtil.close(istream);
            }

            return var6;
        }
    }

    private void createPropertyFile(Properties properties, File outputFile, boolean forceCreation) throws IOException {
        File outputDir = outputFile.getParentFile();
        if (outputDir != null && !outputDir.isDirectory() && !outputDir.mkdirs()) {
            throw new IOException("Failed to create directory: " + outputDir);
        } else if (forceCreation || !this.sameContents(properties, outputFile)) {
            FileOutputStream os = new FileOutputStream(outputFile);

            try {
                properties.store(os, "Generated by Maven");
                os.close();
                os = null;
            } finally {
                IOUtil.close(os);
            }

        }
    }

    public void createPomProperties(MavenProject project, JarArchiver archiver, File pomPropertiesFile, boolean forceCreation) throws ArchiverException, IOException {
        String artifactId = project.getArtifactId();
        String groupId = project.getGroupId();
        Properties p = new Properties();
        p.setProperty("groupId", project.getGroupId());
        p.setProperty("artifactId", project.getArtifactId());
        p.setProperty("version", project.getVersion());
        this.createPropertyFile(p, pomPropertiesFile, forceCreation);
        archiver.addFile(pomPropertiesFile, "META-INF/maven/" + groupId + "/" + artifactId + "/pom.properties");
    }
}
